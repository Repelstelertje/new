---
import Base from "../../../layouts/Base.astro";
import Breadcrumbs from "../../../components/Breadcrumbs.astro";
import ProfileCard from "../../../components/ProfileCard.astro";
import CTA from "../../../components/CTA.astro";
import { CITIES } from "../../../lib/cities";
import { getProvince, getPopular } from "../../../lib/api";
import { getCollection, getEntry } from "astro:content";

type CardProfile = Awaited<ReturnType<typeof getProvince>>["profiles"][number];

type StaticPath = {
  params: { city: string };
  props: { city: string; province: string; profiles: CardProfile[] };
};

export async function getStaticPaths() {
  const paths: StaticPath[] = [];

  for (const c of CITIES) {
    let all: CardProfile[] = [];

    try {
      const data = await getProvince(c.province, 60, 1);
      all = data.profiles ?? [];
    } catch (error) {
      all = [];
    }

    const matches = all.filter((p) => (p.city ?? "").toLowerCase() === c.city.toLowerCase());
    const pick = (matches.length >= 6 ? matches : all).slice(0, 6);

    paths.push({ params: { city: c.slug }, props: { city: c.city, province: c.province, profiles: pick } });
  }

  return paths;
}

const { city, province, profiles } = Astro.props as { city: string; province: string; profiles: CardProfile[] };
const citySlug = Astro.params.city ?? "";
const routeSlug = `datingtips-${citySlug}`;
const collection = await getCollection("datingtips");
type DatingTipEntry = (typeof collection)[number];

const matchBySlug = (entry: DatingTipEntry, candidate: string) =>
  candidate
    ? entry.slug === candidate || entry.id === candidate || entry.id.endsWith(`/${candidate}`)
    : false;

let matched = collection.find((entry) => matchBySlug(entry, routeSlug) || matchBySlug(entry, citySlug));

if (!matched) {
  matched = collection.find((entry) => entry.data.city?.toLowerCase() === city.toLowerCase());
}

let Content: Awaited<ReturnType<DatingTipEntry["render"]>>["Content"] | undefined;
let contentTitle = `Datingtips ${city} â€“ slim daten in ${city}`;
let contentDescription = `Handige datingtips voor ${city}. Lees de basis en bekijk voorbeelden van profielen uit ${province}.`;
let intro: string | undefined;
let pageProfiles: CardProfile[] = profiles;
let cta: { label: string; href: string } | undefined;

const breadcrumbItems = [
  { href: "/", label: "Home" },
  { href: "/datingtips-nederland/", label: "Datingtips" },
  { href: Astro.url.pathname, label: `Datingtips ${city}` },
];

if (matched) {
  const entry = await getEntry("datingtips", matched.id);
  const rendered = await entry.render();
  Content = rendered.Content;

  contentTitle = entry.data.title;
  contentDescription = entry.data.metaDescription;
  intro = entry.data.intro;
  cta = entry.data.cta;

  try {
    if (entry.data.profiles.source === "province" && entry.data.province) {
      const provinceData = await getProvince(entry.data.province, entry.data.profiles.limit, 1);
      pageProfiles = provinceData.profiles ?? [];
    } else {
      const popularData = await getPopular(entry.data.profiles.limit);
      pageProfiles = popularData ?? [];
    }
  } catch (error) {
    pageProfiles = [];
  }
}
---
<Base title={contentTitle} description={contentDescription} path={Astro.url.pathname} staging={import.meta.env.STAGING}>
  <Breadcrumbs items={breadcrumbItems} />
  {matched && Content ? (
    <>
      <header class="mb-8 space-y-4">
        <h1 class="text-3xl font-bold text-neutral-900">{contentTitle}</h1>
        {intro && <p class="text-neutral-700">{intro}</p>}
      </header>

      <article class="prose max-w-none prose-p:text-neutral-800 prose-headings:text-neutral-900">
        <Content />
      </article>

      <section class="mt-10 space-y-4">
        <h2 class="text-2xl font-semibold text-neutral-900">Voorbeeldprofielen</h2>
        {pageProfiles.length > 0 ? (
          <div class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
            {pageProfiles.map((p, idx) => (
              <ProfileCard {...p} rank={idx + 1} />
            ))}
          </div>
        ) : (
          <p class="text-neutral-700">Er zijn op dit moment geen profielen beschikbaar.</p>
        )}
      </section>

      {cta && (
        <div class="mt-10">
          <CTA href={cta.href} label={cta.label} />
        </div>
      )}
    </>
  ) : (
    <>
      <header class="mb-6">
        <h1 class="text-3xl font-bold text-neutral-900">Datingtips {city}</h1>
        <p class="text-neutral-700">
          Hier volgt later uitgebreide content over daten in {city}. Ondertussen alvast een paar profielen uit {province}.
        </p>
      </header>

      {profiles.length > 0 ? (
        <section class="grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {profiles.map((p, idx) => (
            <ProfileCard {...p} rank={idx + 1} />
          ))}
        </section>
      ) : (
        <p class="text-neutral-700">Er zijn op dit moment geen profielen beschikbaar uit {province}.</p>
      )}
    </>
  )}
</Base>
