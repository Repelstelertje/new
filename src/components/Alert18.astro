---
const {
  title = 'Bevestig je leeftijd',
  message = 'Deze site is alleen voor 18+. Ga verder als je dat bent.',
  continueLabel = 'Ik ben 18+',
  exitHref = '/',
  exitLabel = 'Verlaat',
} = Astro.props as {
  title?: string;
  message?: string;
  continueLabel?: string;
  exitHref?: string;
  exitLabel?: string;
};
---
<section
  id="alert18"
  class="fixed inset-0 z-50 hidden items-center justify-center bg-slate-900/80 px-4 py-10"
  role="dialog"
  aria-modal="true"
  aria-labelledby="alert18-title"
>
  <div class="max-w-lg rounded-3xl border border-amber-400 bg-white p-8 text-slate-900 shadow-2xl">
    <div class="mb-6 flex items-center gap-3">
      <span class="inline-flex h-12 w-12 items-center justify-center rounded-full bg-amber-500 text-lg font-bold text-white" aria-hidden="true">18+</span>
      <h2 id="alert18-title" class="text-2xl font-semibold text-slate-900">{title}</h2>
    </div>
    <p class="text-sm text-slate-700">{message}</p>
    <div class="mt-8 flex flex-col gap-3 sm:flex-row sm:items-center">
      <button
        id="alert18-continue"
        type="button"
        aria-label="Bevestig dat je 18 jaar of ouder bent"
        class="inline-flex flex-1 items-center justify-center rounded-full bg-sky-600 px-4 py-3 text-sm font-semibold text-white transition hover:bg-sky-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-sky-400"
      >
        {continueLabel}
      </button>
      <a
        id="alert18-exit"
        href={exitHref}
        aria-label="Verlaat de website"
        class="inline-flex flex-1 items-center justify-center rounded-full border border-slate-300 bg-white px-4 py-3 text-sm font-semibold text-slate-800 transition hover:bg-slate-100 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500"
      >
        {exitLabel}
      </a>
    </div>
  </div>
</section>

<script is:inline>
  const storageKey = 'age_ok';
  const modal = document.getElementById('alert18');
  const continueBtn = document.getElementById('alert18-continue');
  const exitBtn = document.getElementById('alert18-exit');
  const focusableSelector = 'a[href], button:not([disabled]), [tabindex]:not([tabindex="-1"])';
  let lastFocusedElement = null;

  const getFocusable = () => modal ? Array.from(modal.querySelectorAll(focusableSelector)) : [];

  const trapFocus = (event) => {
    if (!modal || modal.classList.contains('hidden')) return;
    if (event.key === 'Escape') {
      event.preventDefault();
      exitBtn?.focus();
      return;
    }
    if (event.key !== 'Tab') return;
    const focusableElements = getFocusable();
    if (focusableElements.length === 0) return;
    const first = focusableElements[0];
    const last = focusableElements[focusableElements.length - 1];

    if (event.shiftKey) {
      if (document.activeElement === first) {
        event.preventDefault();
        last.focus();
      }
    } else if (document.activeElement === last) {
      event.preventDefault();
      first.focus();
    }
  };

  const closeModal = () => {
    if (!modal) return;
    modal.classList.add('hidden');
    document.removeEventListener('keydown', trapFocus);
    if (lastFocusedElement instanceof HTMLElement) {
      lastFocusedElement.focus();
    }
  };

  try {
    if (modal && !localStorage.getItem(storageKey)) {
      lastFocusedElement = document.activeElement;
      modal.classList.remove('hidden');
      document.addEventListener('keydown', trapFocus);
      requestAnimationFrame(() => {
        continueBtn?.focus();
      });

      continueBtn?.addEventListener('click', () => {
        try {
          localStorage.setItem(storageKey, '1');
        } catch (error) {
          console.warn('Kon leeftijdscontrole niet opslaan', error);
        }
        closeModal();
      });

      exitBtn?.addEventListener('click', () => {
        document.removeEventListener('keydown', trapFocus);
      });
    }
  } catch (error) {
    console.warn('Leeftijdscontrole niet beschikbaar', error);
  }
</script>
